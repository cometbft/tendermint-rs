version: 2.1

executors:
  cargo-executor:
    docker:
      - image: rust:1
    resource_class: large
  cargo-audit-executor:
    docker:
      - image: rust:1
    resource_class: small

commands:
  install_coverage_dependencies:
    steps:
      - run:
          name: Install grcov and zip
          command: |
            apt-get update
            apt-get install -y zip
            cargo install --force grcov
  print_version_info:
    steps:
      - run:
          name: Version information
          command: |
            rustup --version
            rustc --version
            cargo --version
  update_stable_toolchain:
    steps:
      - run:
          name: Update toolchain
          command: |
            test -z "stable" || echo "stable" >rust-toolchain
            rustup show active-toolchain
  update_nightly_toolchain:
    steps:
      - run:
          name: Update nightly toolchain
          command: |
            test -z "nightly" || echo "nightly" >rust-toolchain
            rustup show active-toolchain
  calculate_cargo_dependencies:
    steps:
      - run:
          name: Calculate dependencies
          command: test -e Cargo.lock || cargo generate-lockfile

jobs:
  format:
    description: Check proper formatting
    executor: cargo-executor
    steps:
      - checkout
      - update_stable_toolchain
      - print_version_info
      - calculate_cargo_dependencies
      - run:
          name: Check formatting
          command: |
            if rustup component add rustfmt; then
              cargo fmt --all -- --check
            else
              echo Skipping rustfmt
            fi
  clippy:
    description: Lint using clippy
    executor: cargo-executor
    steps:
      - checkout
      - update_stable_toolchain
      - print_version_info
      - calculate_cargo_dependencies
      - run:
          name: Run clippy checks
          command: |
            if rustup component add clippy; then
              cargo clippy --all --all-targets -- -Dwarnings -Drust-2018-idioms
            else
              echo Skipping clippy
            fi
  test-stable:
    description: Run all tests using the stable toolchain
    executor: cargo-executor
    steps:
      - checkout
      - update_stable_toolchain
      - print_version_info
      - calculate_cargo_dependencies
      - run:
          name: Build all targets
          command: cargo build --all --all-targets
      - run:
          name: Run all tests
          command: cargo test --all
  audit:
    description: Audit for vulnerable dependencies
    executor: cargo-audit-executor
    steps:
      - checkout
      - update_stable_toolchain
      - print_version_info
      - run:
          name: Install Cargo Audit
          command: |
            cargo install --force cargo-audit
      - run:
          name: Run Cargo Audit
          command: |
            cargo audit
  test-nightly-coverage:
    description: Collect and upload test coverage using the nighly toolchain
    executor: cargo-executor
    steps:
      - checkout
      - update_nightly_toolchain
      - print_version_info
      - install_coverage_dependencies
      - calculate_cargo_dependencies
      - run:
          name: Run tests with coverage env
          command: |
            export CARGO_INCREMENTAL=0
            export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads"
            cargo clean
            cargo test --all --verbose
      - run:
          name: Collect and upload test coverage
          command: |
            # Note: this currently only matches gc files in crates named *tendermint*.
            # This is something to keep in mind if we create crates that do not have tendermint in
            # their name.
            zip -0 ccov.zip `find . \( -name "*tendermint*.gc*" \) -print`
            grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info
            bash <(curl -s https://codecov.io/bash) -f lcov.info
            rm -f lcov.info
            rm -f ccov.zip

workflows:
  commit-workflow:
    jobs:
      - format
      - clippy
      - test-stable
      - test-nightly-coverage
      - audit